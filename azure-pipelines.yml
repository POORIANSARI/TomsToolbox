name: $(Build.DefinitionName) $(date:yyyyMMdd)$(rev:.r)

pool:
  vmImage: 'windows-2022'

workspace:
  clean: all  

variables:
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  Solution: 'src\TomsToolbox.sln'

steps:
- script: dotnet --info
  displayName: 'Log DotNet version'

- task: DotNetCoreCLI@2
  displayName: 'Restore Solution'
  inputs:
    command: restore
    projects: $(Solution)

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: build
    projects: $(Solution)
    arguments: '--configuration $(BuildConfiguration) --no-restore'

- script: dotnet publish -c $(BuildConfiguration) --no-build src\SampleApp.Ninject\SampleApp.Ninject.csproj
  displayName: 'Publish Sample App'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: DotNetCoreCLI@2
  displayName: 'Run Testst'
  inputs:
    command: test
    projects: $(Solution)
    arguments: '--configuration $(BuildConfiguration) --no-build'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/Packages'
  inputs:
    SourceFolder: Deploy
    Contents: '*.*'
    TargetFolder: '$(build.artifactstagingdirectory)/Packages'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/Sample'
  inputs:
    SourceFolder: 'src\Publish'
    Contents: |
      *.*
      !*.xml
    TargetFolder: '$(build.artifactstagingdirectory)/Sample'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Packages'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/Packages'
    ArtifactName: Packages

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Sample'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/Sample'
    ArtifactName: Sample
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
